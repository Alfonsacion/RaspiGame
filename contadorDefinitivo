from __future__ import print_function
import RPi.GPIO as GPIO
from gpiozero import Buzzer, Button
import time,sys

import smbus
rev = GPIO.RPI_REVISION
if rev == 2 or rev == 3:
  bus = smbus.SMBus(1)
else:
  bus = smbus.SMBus(0)
  
  
  
  
# this device has two I2C addresses
DISPLAY_RGB_ADDR = 0x62
DISPLAY_TEXT_ADDR = 0x3e

# send command to display (no need for external use)    
def textCommand(cmd):
    bus.write_byte_data(DISPLAY_TEXT_ADDR,0x80,cmd)

# set display text \n for second line(or auto wrap)     
def setText(text):
    textCommand(0x01) # clear display
    time.sleep(.05)
    textCommand(0x08 | 0x04) # display on, no cursor
    textCommand(0x28) # 2 lines
    time.sleep(.05)
    count = 0
    row = 0
    for c in text:
        if c == '\n' or count == 16:
            count = 0
            row += 1
            if row == 2:
                break
            textCommand(0xc0)
            if c == '\n':
                continue
        count += 1
        bus.write_byte_data(DISPLAY_TEXT_ADDR,0x40,ord(c))





# Configuracion inicial
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

# Configurar pines para el servo
servo_pin = 12
GPIO.setup(servo_pin, GPIO.OUT)
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(2.5)

# Configurar pines para los botones del servo
button_left_pin = 5
button_right_pin = 16  
GPIO.setup(button_left_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(button_right_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Configurar el buzzer
buzzer_pin = 18
buzzer = Buzzer(buzzer_pin)
button_buzzer_pin = 22

# Configurar pines para los LEDs
led1_pin = 15
led2_pin = 24  
led3_pin = 26
led4_pin = 1 

GPIO.setup(led1_pin, GPIO.OUT)  # Pin del LED 1
GPIO.setup(led2_pin, GPIO.OUT)  # Pin del LED 2
GPIO.setup(led3_pin, GPIO.OUT)  # Pin del LED 3
GPIO.setup(led4_pin, GPIO.OUT)  # Pin del LED 4

# Apagar todos los LEDs al inicio
GPIO.output(led1_pin, GPIO.LOW)
GPIO.output(led2_pin, GPIO.LOW)
GPIO.output(led3_pin, GPIO.LOW)
GPIO.output(led4_pin, GPIO.LOW)

# Inicializar el pin GPIO para el boton del buzzer
button_buzzer = Button(button_buzzer_pin)

# Inicializar el angulo del servo
angle = 0

# Inicializar contadores
shots = 0
hits = 0

# Funciones para cambiar el angulo del servo
def increase_angle(channel):
    global angle
    angle += 5
    if angle > 180:
        angle = 180
    print("Angulo actual:", angle)

def decrease_angle(channel):
    global angle
    angle -= 5
    if angle < 0:
        angle = 0
    print("Angulo actual:", angle)

# Configurar interrupciones para los botones del servo
GPIO.add_event_detect(button_left_pin, GPIO.FALLING, callback=increase_angle, bouncetime=100)
GPIO.add_event_detect(button_right_pin, GPIO.FALLING, callback=decrease_angle, bouncetime=100)

# Funcion para encender los LEDs segun el angulo
def encender_led(angle):
    if 15 <= angle < 35:
        GPIO.output(led1_pin, GPIO.HIGH)
        GPIO.output(led2_pin, GPIO.LOW)
        GPIO.output(led3_pin, GPIO.LOW)
        GPIO.output(led4_pin, GPIO.LOW)
        print("LED 1 ENCENDIDO")
        return True
    elif 60 <= angle < 80:
        GPIO.output(led1_pin, GPIO.LOW)
        GPIO.output(led2_pin, GPIO.HIGH)
        GPIO.output(led3_pin, GPIO.LOW)
        GPIO.output(led4_pin, GPIO.LOW)
        print("LED 2 ENCENDIDO")
        return True
    elif 105 <= angle < 125:
        GPIO.output(led1_pin, GPIO.LOW)
        GPIO.output(led2_pin, GPIO.LOW)
        GPIO.output(led3_pin, GPIO.HIGH)
        GPIO.output(led4_pin, GPIO.LOW)
        print("LED 3 ENCENDIDO")
        return True
    elif 150 <= angle < 170:
        GPIO.output(led1_pin, GPIO.LOW)
        GPIO.output(led2_pin, GPIO.LOW)
        GPIO.output(led3_pin, GPIO.LOW)
        GPIO.output(led4_pin, GPIO.HIGH)
        print("LED 4 ENCENDIDO")
        return True
    else:
        GPIO.output(led1_pin, GPIO.LOW)
        GPIO.output(led2_pin, GPIO.LOW)
        GPIO.output(led3_pin, GPIO.LOW)
        GPIO.output(led4_pin, GPIO.LOW)
        print("TODOS LOS LEDS APAGADOS")
        return False

# Funcion para activar el buzzer y los LEDs
def activate_buzzer_and_leds():
    global shots, hits
    buzzer.on()
    time.sleep(0.1)
    buzzer.off()
    shots += 1
    if encender_led(angle):
        hits += 1
    if shots > 0:
        accuracy = (hits / shots) * 100
        accuracy2 = round(accuracy, 0)
    else:
        accuracy = 0
    print(f"Disparos: {shots}, Aciertos: {hits}, Porcentaje de aciertos: {accuracy:.2f}%")
    setText("Disparos: {} \nHits: {}  {}%".format(str(shots), str(hits), str(accuracy2)))

# Asignar el boton del buzzer a la funcion que tambien enciende los LEDs
button_buzzer.when_pressed = activate_buzzer_and_leds

try:
    while True:
        # Cambiar la posicion del servo
        duty = angle / 18 + 2.5
        pwm.ChangeDutyCycle(duty)
        time.sleep(0.05)

except KeyboardInterrupt:
    pwm.stop()
    GPIO.cleanup()
